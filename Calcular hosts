#Autor: Andrés Jiménez Martín

#!/bin/bash

# Función para validar dirección IP
function validar_ip() {
    local ip=$1
    local val='^([0-9]{1,3}\.){3}[0-9]{1,3}$'

    if [[ ! $ip =~ $val ]]; then
        return 1
    fi

    IFS='.' read -r -a octetos <<< "$ip"
    for octeto in "${octetos[@]}"; do
        if ((octeto < 0 || octeto > 255)); then
            return 1
        fi
    done

    return 0
}

# Función para validar máscara en formato CIDR o decimal
function validar_mascara() {
    local mascara=$1

    if [[ $mascara =~ ^[0-9]{1,2}$ ]]; then
        if ((mascara >= 0 && mascara <= 32)); then
            echo "$mascara"
            return 0
        else
            return 1
        fi
    fi

    # Si viene como 255.255.255.0
    if validar_ip "$mascara"; then
        bin=$(ip2bin "$mascara")
        if [[ $bin =~ ^1+0+$ ]]; then
            echo "$(( $(grep -o 1 <<< "$bin" | wc -l) ))"
            return 0
        fi
    fi

    return 1
}

# Convierte IP a binario
function ip2bin() {
    IFS='.' read -r o1 o2 o3 o4 <<< "$1"
    printf "%08d%08d%08d%08d\n" \
        "$(echo "obase=2;$o1" | bc)" \
        "$(echo "obase=2;$o2" | bc)" \
        "$(echo "obase=2;$o3" | bc)" \
        "$(echo "obase=2;$o4" | bc)"
}

# Calcular hosts útiles
function calcular_hosts() {
    local bits=$1
    if (( bits == 31 || bits == 32 )); then
        echo "0 (red de solo 2 o 1 direcciones, sin hosts utilizables)"
    else
        echo "$(( (2 ** (32 - bits)) - 2 ))"
    fi
}

# ---------- INICIO ----------

# Leer dirección de red
read -p "Introduce la dirección de red (formato x.x.x.x): " red
if ! validar_ip "$red"; then
    echo "Dirección IP inválida."
    exit 1
fi

# Leer máscara de red
read -p "Introduce la máscara de red (Ej. 255.255.255.0): " mascara_input
cidr=$(validar_mascara "$mascara_input")
if [[ $? -ne 0 ]]; then
    echo "Máscara de red inválida."
    exit 1
fi

# Calcular hosts
echo "Dirección: $red/$cidr"
echo -n "Hosts utilizables: "
calcular_hosts "$cidr"
